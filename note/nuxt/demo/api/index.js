/*
 a 
 <ref *2> {
  isStatic: false,
  isDev: true,
  isHMR: false,
  app: <ref *1> {
    head: {
      title: 'demo',
      htmlAttrs: [Object],
      meta: [Array],
      link: [Array],
      style: [],
      script: []
    },
    store: Store {
      _committing: false,
      _actions: [Object: null prototype] {},
      _actionSubscribers: [],
      _mutations: [Object: null prototype],
      _wrappedGetters: [Object: null prototype] {},
      _modules: [ModuleCollection],
      _modulesNamespaceMap: [Object: null prototype] {},
      _subscribers: [],
      _watcherVM: [Vue],
      _makeLocalGettersCache: [Object: null prototype] {},
      dispatch: [Function: boundDispatch],
      commit: [Function: boundCommit],
      strict: true,
      getters: {},
      _vm: [Vue],
      '$router': [VueRouter],
      registerModule: [Function: registerModule],
      app: [Circular *1],
      '$config': [Object],
      '$cookies': [Object],
      '$axios': [Function]
    },
    router: VueRouter {
      app: null,
      apps: [],
      options: [Object],
      beforeHooks: [],
      resolveHooks: [],
      afterHooks: [],
      matcher: [Object],
      fallback: false,
      mode: 'abstract',
      history: [AbstractHistory],
      push: [Function: push],
      resolve: [Function (anonymous)]
    },
    nuxt: {
      defaultTransition: [Object],
      transitions: [Array],
      setTransitions: [Function: setTransitions],
      err: null,
      dateErr: null,
      error: [Function: error]
    },
    render: [Function: render],
    data: [Function: data],
    beforeCreate: [Function: beforeCreate],
    created: [Function: created],
    mounted: [AsyncFunction: mounted],
    watch: { 'nuxt.err': 'errorChanged' },
    computed: {
      isOffline: [Function: isOffline],
      isFetching: [Function: isFetching]
    },
    methods: {
      refreshOnlineStatus: [Function: refreshOnlineStatus],
      refresh: [AsyncFunction: refresh],
      errorChanged: [Function: errorChanged],
      setLayout: [Function: setLayout],
      loadLayout: [Function: loadLayout]
    },
    components: { NuxtLoading: [Object] },
    context: [Circular *2],
    '$config': { _app: [Object] },
    '$cookies': {
      parseJSON: true,
      set: [Function: set],
      setAll: [Function: setAll],
      get: [Function: get],
      getAll: [Function: getAll],
      remove: [Function: remove],
      removeAll: [Function: removeAll],
      nodeCookie: [Object]
    },
    '$axios': [Function: wrap] {
      constructor: [Function: wrap],
      request: [Function: wrap],
      _request: [Function: wrap],
      getUri: [Function: wrap],
      delete: [Function: wrap],
      get: [Function: wrap],
      head: [Function: wrap],
      options: [Function: wrap],
      post: [Function: wrap],
      postForm: [Function: wrap],
      put: [Function: wrap],
      putForm: [Function: wrap],
      patch: [Function: wrap],
      patchForm: [Function: wrap],
      defaults: [Object],
      interceptors: [Object],
      create: [Function: bound create],
      CancelToken: [class CancelToken],
      isCancel: [Function: isCancel],
      setBaseURL: [Function: bound setBaseURL],
      setHeader: [Function: bound setHeader],
      setToken: [Function: bound setToken],
      onRequest: [Function: bound onRequest],
      onResponse: [Function: bound onResponse],
      onRequestError: [Function: bound onRequestError],
      onResponseError: [Function: bound onResponseError],
      onError: [Function: bound onError],
      '$request': [Function: bound ],
      '$delete': [Function: bound ],
      '$get': [Function: bound ],
      '$head': [Function: bound ],
      '$options': [Function: bound ],
      '$post': [Function: bound ],
      '$put': [Function: bound ],
      '$patch': [Function: bound ]
    }
  },
  store: <ref *5> Store {
    _committing: false,
    _actions: [Object: null prototype] {},
    _actionSubscribers: [],
    _mutations: [Object: null prototype] { setToken: [Array], getToken: [Array] },
    _wrappedGetters: [Object: null prototype] {},
    _modules: ModuleCollection { root: [Module] },
    _modulesNamespaceMap: [Object: null prototype] {},
    _subscribers: [],
    _watcherVM: <ref *3> Vue {
      _uid: 0,
      _isVue: true,
      __v_skip: true,
      _scope: [EffectScope],
      '$options': [Object],
      _renderProxy: [Circular *3],
      _self: [Circular *3],
      '$parent': undefined,
      '$root': [Circular *3],
      '$children': [],
      '$refs': {},
      _provided: [Object: null prototype] {},
      _watcher: null,
      _inactive: null,
      _directInactive: false,
      _isMounted: false,
      _isDestroyed: false,
      _isBeingDestroyed: false,
      _events: [Object: null prototype],
      _hasHookEvent: true,
      _vnode: null,
      _staticTrees: null,
      '$vnode': undefined,
      '$slots': {},
      '$scopedSlots': {},
      _c: [Function (anonymous)],
      '$createElement': [Function (anonymous)],
      '$attrs': [Getter/Setter],
      '$listeners': [Getter/Setter],
      _routerRoot: [Circular *3],
      _data: {}
    },
    _makeLocalGettersCache: [Object: null prototype] {},
    dispatch: [Function: boundDispatch],
    commit: [Function: boundCommit],
    strict: true,
    getters: {},
    _vm: <ref *4> Vue {
      _uid: 1,
      _isVue: true,
      __v_skip: true,
      _scope: [EffectScope],
      '$options': [Object],
      _renderProxy: [Circular *4],
      _self: [Circular *4],
      '$parent': undefined,
      '$root': [Circular *4],
      '$children': [],
      '$refs': {},
      _provided: [Object: null prototype] {},
      _watcher: null,
      _inactive: null,
      _directInactive: false,
      _isMounted: false,
      _isDestroyed: false,
      _isBeingDestroyed: false,
      _events: [Object: null prototype],
      _hasHookEvent: true,
      _vnode: null,
      _staticTrees: null,
      '$vnode': undefined,
      '$slots': {},
      '$scopedSlots': {},
      _c: [Function (anonymous)],
      '$createElement': [Function (anonymous)],
      '$attrs': [Getter/Setter],
      '$listeners': [Getter/Setter],
      _routerRoot: [Circular *4],
      _data: [Object],
      _computedWatchers: [Object: null prototype] {}
    },
    '$router': VueRouter {
      app: null,
      apps: [],
      options: [Object],
      beforeHooks: [],
      resolveHooks: [],
      afterHooks: [],
      matcher: [Object],
      fallback: false,
      mode: 'abstract',
      history: [AbstractHistory],
      push: [Function: push],
      resolve: [Function (anonymous)]
    },
    registerModule: [Function: registerModule],
    app: <ref *1> {
      head: [Object],
      store: [Circular *5],
      router: [VueRouter],
      nuxt: [Object],
      render: [Function: render],
      data: [Function: data],
      beforeCreate: [Function: beforeCreate],
      created: [Function: created],
      mounted: [AsyncFunction: mounted],
      watch: [Object],
      computed: [Object],
      methods: [Object],
      components: [Object],
      context: [Circular *2],
      '$config': [Object],
      '$cookies': [Object],
      '$axios': [Function]
    },
    '$config': { _app: [Object] },
    '$cookies': {
      parseJSON: true,
      set: [Function: set],
      setAll: [Function: setAll],
      get: [Function: get],
      getAll: [Function: getAll],
      remove: [Function: remove],
      removeAll: [Function: removeAll],
      nodeCookie: [Object]
    },
    '$axios': [Function: wrap] {
      constructor: [Function: wrap],
      request: [Function: wrap],
      _request: [Function: wrap],
      getUri: [Function: wrap],
      delete: [Function: wrap],
      get: [Function: wrap],
      head: [Function: wrap],
      options: [Function: wrap],
      post: [Function: wrap],
      postForm: [Function: wrap],
      put: [Function: wrap],
      putForm: [Function: wrap],
      patch: [Function: wrap],
      patchForm: [Function: wrap],
      defaults: [Object],
      interceptors: [Object],
      create: [Function: bound create],
      CancelToken: [class CancelToken],
      isCancel: [Function: isCancel],
      setBaseURL: [Function: bound setBaseURL],
      setHeader: [Function: bound setHeader],
      setToken: [Function: bound setToken],
      onRequest: [Function: bound onRequest],
      onResponse: [Function: bound onResponse],
      onRequestError: [Function: bound onRequestError],
      onResponseError: [Function: bound onResponseError],
      onError: [Function: bound onError],
      '$request': [Function: bound ],
      '$delete': [Function: bound ],
      '$get': [Function: bound ],
      '$head': [Function: bound ],
      '$options': [Function: bound ],
      '$post': [Function: bound ],
      '$put': [Function: bound ],
      '$patch': [Function: bound ]
    }
  },
  payload: undefined,
  error: [Function: bound error],
  base: '/',
  env: {},
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _peername: [Object],
      _httpMessage: [ServerResponse],
      timeout: 0,
      [Symbol(async_id_symbol)]: 97520,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 30001,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 97528,
        [Symbol(triggerId)]: 97525
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost:3000',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'sec-ch-ua',
      '"Microsoft Edge";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
      'sec-ch-ua-mobile',
      '?0',
      'sec-ch-ua-platform',
      '"Windows"',
      'Upgrade-Insecure-Requests',
      '1',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.60',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*\/*; q = 0.8, application / signed - exchange; v = b3; q = 0.7',
'Sec-Fetch-Site',
  'same-origin',
  'Sec-Fetch-Mode',
  'navigate',
  'Sec-Fetch-Dest',
  'document',
  'Referer',
  'http://localhost:3000/login',
  'Accept-Encoding',
  'gzip, deflate, br',
  'Accept-Language',
  'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',
  'Cookie',
  'token=',
  'If-None-Match',
  '"a94-zjdOWXdOUHrN7PjBaixYYFoBvFA"'
    ],
rawTrailers: [],
  aborted: false,
    upgrade: false,
      url: '/login',
        method: 'GET',
          statusCode: null,
            statusMessage: null,
              client: Socket {
  connecting: false,
    _hadError: false,
      _parent: null,
        _host: null,
          _readableState: [ReadableState],
            _events: [Object: null prototype],
              _eventsCount: 8,
                _maxListeners: undefined,
                  _writableState: [WritableState],
                    allowHalfOpen: true,
                      _sockname: null,
                        _pendingData: null,
                          _pendingEncoding: '',
                            server: [Server],
                              _server: [Server],
                                parser: [HTTPParser],
                                  on: [Function: socketListenerWrap],
                                    addListener: [Function: socketListenerWrap],
                                      prependListener: [Function: socketListenerWrap],
                                        setEncoding: [Function: socketSetEncoding],
                                          _paused: false,
                                            _peername: [Object],
                                              _httpMessage: [ServerResponse],
                                                timeout: 0,
                                                  [Symbol(async_id_symbol)]: 97520,
                                                    [Symbol(kHandle)]: [TCP],
                                                      [Symbol(lastWriteQueueSize)]: 0,
                                                        [Symbol(timeout)]: Timeout {
    _idleTimeout: -1,
      _idlePrev: null,
        _idleNext: null,
          _idleStart: 30001,
            _onTimeout: null,
              _timerArgs: undefined,
                _repeat: null,
                  _destroyed: true,
                    [Symbol(refed)]: false,
                      [Symbol(kHasPrimitive)]: false,
                        [Symbol(asyncId)]: 97528,
                          [Symbol(triggerId)]: 97525
  },
  [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: false,
              [Symbol(kSetKeepAliveInitialDelay)]: 0,
                [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0
},
_consuming: false,
  _dumped: false,
    originalUrl: '/login',
      _parsedUrl: Url {
  protocol: null,
    slashes: null,
      auth: null,
        host: null,
          port: null,
            hostname: null,
              hash: null,
                search: null,
                  query: null,
                    pathname: '/login',
                      path: '/login',
                        href: '/login',
                          _raw: '/login'
},
_parsedOriginalUrl: Url {
  protocol: null,
    slashes: null,
      auth: null,
        host: null,
          port: null,
            hostname: null,
              hash: null,
                search: null,
                  query: null,
                    pathname: '/login',
                      path: '/login',
                        href: '/login',
                          _raw: '/login'
},
[Symbol(kCapture)]: false,
  [Symbol(kHeaders)]: {
  host: 'localhost:3000',
    connection: 'keep-alive',
      'cache-control': 'max-age=0',
        'sec-ch-ua': '"Microsoft Edge";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
          'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
              'upgrade-insecure-requests': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.60',
                  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*\/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                    'sec-fetch-site': 'same-origin',
                      'sec-fetch-mode': 'navigate',
                        'sec-fetch-dest': 'document',
                          referer: 'http://localhost:3000/login',
                            'accept-encoding': 'gzip, deflate, br',
                              'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',
                                cookie: 'token=',
                                  'if-none-match': '"a94-zjdOWXdOUHrN7PjBaixYYFoBvFA"'
},
[Symbol(kHeadersCount)]: 34,
  [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0
  },
res: <ref * 6 > ServerResponse {
  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
    _maxListeners: undefined,
      outputData: [],
        outputSize: 0,
          writable: true,
            destroyed: false,
              _last: false,
                chunkedEncoding: false,
                  shouldKeepAlive: true,
                    maxRequestsOnConnectionReached: false,
                      _defaultKeepAlive: true,
                        useChunkedEncodingByDefault: true,
                          sendDate: true,
                            _removedConnection: false,
                              _removedContLen: false,
                                _removedTE: false,
                                  _contentLength: null,
                                    _hasBody: true,
                                      _trailer: '',
                                        finished: false,
                                          _headerSent: false,
                                            _closed: false,
                                              socket: Socket {
    connecting: false,
      _hadError: false,
        _parent: null,
          _host: null,
            _readableState: [ReadableState],
              _events: [Object: null prototype],
                _eventsCount: 8,
                  _maxListeners: undefined,
                    _writableState: [WritableState],
                      allowHalfOpen: true,
                        _sockname: null,
                          _pendingData: null,
                            _pendingEncoding: '',
                              server: [Server],
                                _server: [Server],
                                  parser: [HTTPParser],
                                    on: [Function: socketListenerWrap],
                                      addListener: [Function: socketListenerWrap],
                                        prependListener: [Function: socketListenerWrap],
                                          setEncoding: [Function: socketSetEncoding],
                                            _paused: false,
                                              _peername: [Object],
                                                _httpMessage: [Circular * 6],
                                                  timeout: 0,
                                                    [Symbol(async_id_symbol)]: 97520,
                                                      [Symbol(kHandle)]: [TCP],
                                                        [Symbol(lastWriteQueueSize)]: 0,
                                                          [Symbol(timeout)]: Timeout {
      _idleTimeout: -1,
        _idlePrev: null,
          _idleNext: null,
            _idleStart: 30001,
              _onTimeout: null,
                _timerArgs: undefined,
                  _repeat: null,
                    _destroyed: true,
                      [Symbol(refed)]: false,
                        [Symbol(kHasPrimitive)]: false,
                          [Symbol(asyncId)]: 97528,
                            [Symbol(triggerId)]: 97525
    },
    [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: false,
                [Symbol(kSetKeepAliveInitialDelay)]: 0,
                  [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
    _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
        req: IncomingMessage {
    _readableState: [ReadableState],
      _events: [Object: null prototype] { },
    _eventsCount: 0,
      _maxListeners: undefined,
        socket: [Socket],
          httpVersionMajor: 1,
            httpVersionMinor: 1,
              httpVersion: '1.1',
                complete: true,
                  rawHeaders: [Array],
                    rawTrailers: [],
                      aborted: false,
                        upgrade: false,
                          url: '/login',
                            method: 'GET',
                              statusCode: null,
                                statusMessage: null,
                                  client: [Socket],
                                    _consuming: false,
                                      _dumped: false,
                                        originalUrl: '/login',
                                          _parsedUrl: [Url],
                                            _parsedOriginalUrl: [Url],
                                              [Symbol(kCapture)]: false,
                                                [Symbol(kHeaders)]: [Object],
                                                  [Symbol(kHeadersCount)]: 34,
                                                    [Symbol(kTrailers)]: null,
                                                      [Symbol(kTrailersCount)]: 0
  },
  _sent100: false,
    _expect_continue: false,
      locals: { },
  statusCode: 200,
    [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: null
},
ssrContext: {
  req: IncomingMessage {
    _readableState: [ReadableState],
      _events: [Object: null prototype] { },
    _eventsCount: 0,
      _maxListeners: undefined,
        socket: [Socket],
          httpVersionMajor: 1,
            httpVersionMinor: 1,
              httpVersion: '1.1',
                complete: true,
                  rawHeaders: [Array],
                    rawTrailers: [],
                      aborted: false,
                        upgrade: false,
                          url: '/login',
                            method: 'GET',
                              statusCode: null,
                                statusMessage: null,
                                  client: [Socket],
                                    _consuming: false,
                                      _dumped: false,
                                        originalUrl: '/login',
                                          _parsedUrl: [Url],
                                            _parsedOriginalUrl: [Url],
                                              [Symbol(kCapture)]: false,
                                                [Symbol(kHeaders)]: [Object],
                                                  [Symbol(kHeadersCount)]: 34,
                                                    [Symbol(kTrailers)]: null,
                                                      [Symbol(kTrailersCount)]: 0
  },
  res: <ref * 6 > ServerResponse {
    _events: [Object: null prototype],
      _eventsCount: 1,
        _maxListeners: undefined,
          outputData: [],
            outputSize: 0,
              writable: true,
                destroyed: false,
                  _last: false,
                    chunkedEncoding: false,
                      shouldKeepAlive: true,
                        maxRequestsOnConnectionReached: false,
                          _defaultKeepAlive: true,
                            useChunkedEncodingByDefault: true,
                              sendDate: true,
                                _removedConnection: false,
                                  _removedContLen: false,
                                    _removedTE: false,
                                      _contentLength: null,
                                        _hasBody: true,
                                          _trailer: '',
                                            finished: false,
                                              _headerSent: false,
                                                _closed: false,
                                                  socket: [Socket],
                                                    _header: null,
                                                      _keepAliveTimeout: 5000,
                                                        _onPendingData: [Function: bound updateOutgoingData],
                                                          req: [IncomingMessage],
                                                            _sent100: false,
                                                              _expect_continue: false,
                                                                locals: { },
    statusCode: 200,
      [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
          [Symbol(corked)]: 0,
            [Symbol(kOutHeaders)]: null
  },
  url: '/login',
    target: 'server',
      spa: undefined,
        modern: false,
          runtimeConfig: { private: [Object], public: [Object] },
  _registeredComponents: Set(0) { },
  redirected: false,
    next: [Function(anonymous)],
      beforeRenderFns: [],
        beforeSerializeFns: [],
          nuxt: {
    layout: 'default',
      data: [],
        fetch: { },
    error: null,
      state: null,
        serverRendered: true,
          routePath: '',
            config: [Object]
  },
  fetchCounters: { }
},
redirect: [Function(anonymous)],
  beforeNuxtRender: [Function(anonymous)],
    beforeSerialize: [Function(anonymous)],
      route: {
  name: 'login',
    meta: [{}],
      path: '/login',
        hash: '',
          query: { },
  params: { },
  fullPath: '/login',
    matched: [[Object]]
},
next: [Function(anonymous)],
  _redirected: false,
    _errored: false,
      params: { },
query: { },
'$config': { _app: { basePath: '/', assetsPath: '/_nuxt/', cdnURL: null } },
'$cookies': {
  parseJSON: true,
    set: [Function: set],
      setAll: [Function: setAll],
        get: [Function: get],
          getAll: [Function: getAll],
            remove: [Function: remove],
              removeAll: [Function: removeAll],
                nodeCookie: { parse: [Function: o], serialize: [Function: n] }
},
'$axios': [Function: wrap] {
  constructor: [Function: wrap],
    request: [Function: wrap],
      _request: [Function: wrap],
        getUri: [Function: wrap],
          delete: [Function: wrap],
            get: [Function: wrap],
              head: [Function: wrap],
                options: [Function: wrap],
                  post: [Function: wrap],
                    postForm: [Function: wrap],
                      put: [Function: wrap],
                        putForm: [Function: wrap],
                          patch: [Function: wrap],
                            patchForm: [Function: wrap],
                              defaults: {
    transitional: [Object],
      adapter: [Array],
        transformRequest: [Array],
          transformResponse: [Array],
            timeout: 0,
              xsrfCookieName: 'XSRF-TOKEN',
                xsrfHeaderName: 'X-XSRF-TOKEN',
                  maxContentLength: -1,
                    maxBodyLength: -1,
                      env: [Object],
                        validateStatus: [Function: validateStatus],
                          headers: [Object],
                            baseURL: 'http://localhost:3000'
  },
  interceptors: { request: [InterceptorManager], response: [InterceptorManager] },
  create: [Function: bound create],
    CancelToken: [class CancelToken],
      isCancel: [Function: isCancel],
        setBaseURL: [Function: bound setBaseURL],
          setHeader: [Function: bound setHeader],
            setToken: [Function: bound setToken],
              onRequest: [Function: bound onRequest],
                onResponse: [Function: bound onResponse],
                  onRequestError: [Function: bound onRequestError],
                    onResponseError: [Function: bound onResponseError],
                      onError: [Function: bound onError],
                        '$request': [Function: bound],
                          '$delete': [Function: bound],
                            '$get': [Function: bound],
                              '$head': [Function: bound],
                                '$options': [Function: bound],
                                  '$post': [Function: bound],
                                    '$put': [Function: bound],
                                      '$patch': [Function: bound]
}
}
*/

export default ({ app, $axios }, inject) => {
  // console.log('api', app, $axios, inject)
  /*
    单页面 api 
    export function apiGet (id) {
      return request({
        url : 'api地址',
        method : 'get' ,
        params : {id}
      })
    }
    
    nuxtjs 
    inject('apiGet',(id) => $axios({
        url : 'api地址',
        method : 'get' ,
        params : {id}
    }))
        
    在页面组件中通过 this.$apiGet()
  */
  inject('apiGet', () => {
    console.log('api get')
  })
  inject('apiPost', () => {
    console.log('api post')
  })

  inject('apiUser', () => ({
    add: () => console.log('api user add '),
    del: () => console.log('api user del '),
    update: () => console.log('api user update '),
  }))

  inject('apiMap', {
    add: () => console.log('api map add '),
    del: () => console.log('api map del '),
    update: () => console.log('api map update '),
  })
}